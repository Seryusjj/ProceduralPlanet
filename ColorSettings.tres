[gd_resource type="Resource" load_steps=6 format=2]

[ext_resource path="res://ColorSettings.cs" type="Script" id=1]
[ext_resource path="res://PlanetColorGradient.tres" type="Gradient" id=2]

[sub_resource type="Shader" id=1]
code = "shader_type spatial;

uniform vec2 elevation;
uniform vec3 center;
uniform sampler2D gradient;

varying float point_length;


// generate a value between start and end based on t -> [0, 1]
//t=0 gives me start, t=1 gives me end
float lerp(float start, float end, float t) {
	return start * (1.0 - t) + end * t;
}

//generate a valaue between 0 and 1 based on start and end
float inverse_lerp(float start, float end, float t) {
	if (end - start < 0.0) {
		return start;
	}
	return (t - start) / (end - start);
}

void vertex() {
	point_length = distance (center, VERTEX);	
	//point_length = length(VERTEX); //could be used as well
}

void fragment() {	
	//x = min; y = max values generated
	float uv = inverse_lerp(elevation.x, elevation.y, point_length);
	vec4 sample = texture (gradient , vec2(uv,uv));
	ALBEDO = sample.xyz;
}"

[sub_resource type="GradientTexture" id=2]
gradient = ExtResource( 2 )
width = 50

[sub_resource type="ShaderMaterial" id=3]
shader = SubResource( 1 )
shader_param/elevation = Vector2( 1, 1.11934 )
shader_param/center = Vector3( 0, 0, 0 )
shader_param/gradient = SubResource( 2 )

[resource]
script = ExtResource( 1 )
PlanetMaterial = SubResource( 3 )
PlanetColour = ExtResource( 2 )
